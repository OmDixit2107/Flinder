import 'dart:convert';

class PreferencesModel {
  final String id;
  final String userId;
  final Map<String, dynamic> critical;
  final Map<String, dynamic> nonCritical;
  final Map<String, dynamic> discoverySettings;
  final Map<String, dynamic>? interests;
  final DateTime createdAt;
  final DateTime updatedAt;

  PreferencesModel({
    required this.id,
    required this.userId,
    required this.critical,
    required this.nonCritical,
    required this.discoverySettings,
    this.interests,
    required this.createdAt,
    required this.updatedAt,
  });

  factory PreferencesModel.fromJson(Map<String, dynamic> json) {
    try {
      // Print keys for debugging the structure
      print('PreferencesModel.fromJson - Received keys: ${json.keys.toList()}');

      // Handle nested response structure
      final data = json.containsKey('data') ? json['data'] : json;

      // Handle critical preferences with null safety
      final critical =
          data['critical'] != null
              ? Map<String, dynamic>.from(data['critical'])
              : <String, dynamic>{};

      // Handle non-critical preferences with null safety
      final nonCritical =
          data['nonCritical'] != null
              ? Map<String, dynamic>.from(data['nonCritical'])
              : <String, dynamic>{};

      // Handle discovery settings with null safety
      final discoverySettings =
          data['discoverySettings'] != null
              ? Map<String, dynamic>.from(data['discoverySettings'])
              : <String, dynamic>{};

      // Handle interests with null safety and correct typing
      Map<String, List<String>> interestsMap = {};
      if (data['interests'] != null) {
        final interests = Map<String, dynamic>.from(data['interests']);
        interests.forEach((key, value) {
          if (value is List) {
            interestsMap[key] = List<String>.from(
              value.map((e) => e.toString()),
            );
          }
        });
      }

      // Handle date fields, defaulting to current date if null
      DateTime createdAt;
      try {
        createdAt =
            data['createdAt'] != null
                ? DateTime.parse(data['createdAt'])
                : DateTime.now();
      } catch (e) {
        print('Error parsing createdAt: $e');
        createdAt = DateTime.now();
      }

      DateTime updatedAt;
      try {
        updatedAt =
            data['updatedAt'] != null
                ? DateTime.parse(data['updatedAt'])
                : DateTime.now();
      } catch (e) {
        print('Error parsing updatedAt: $e');
        updatedAt = DateTime.now();
      }

      return PreferencesModel(
        id: data['id']?.toString() ?? '',
        userId: data['userId']?.toString() ?? '',
        critical: critical,
        nonCritical: nonCritical,
        discoverySettings: discoverySettings,
        interests: interestsMap,
        createdAt: createdAt,
        updatedAt: updatedAt,
      );
    } catch (e) {
      print('Error in PreferencesModel.fromJson: $e');
      print('JSON data: $json');
      // Return a default model on error
      return PreferencesModel.createDefault('');
    }
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'userId': userId,
      'critical': critical,
      'nonCritical': nonCritical,
      'discoverySettings': discoverySettings,
      'interests': interests,
      'createdAt': createdAt.toIso8601String(),
      'updatedAt': updatedAt.toIso8601String(),
    };
  }

  // Create a new instance with updated nonCritical section
  PreferencesModel copyWithNonCritical(Map<String, dynamic> newNonCritical) {
    return PreferencesModel(
      id: id,
      userId: userId,
      critical: critical,
      nonCritical: newNonCritical,
      discoverySettings: discoverySettings,
      interests: interests,
      createdAt: createdAt,
      updatedAt: DateTime.now(),
    );
  }

  // Create a new instance with updated interests
  PreferencesModel copyWithInterests(Map<String, List<String>> newInterests) {
    return PreferencesModel(
      id: id,
      userId: userId,
      critical: critical,
      nonCritical: nonCritical,
      discoverySettings: discoverySettings,
      interests: newInterests,
      createdAt: createdAt,
      updatedAt: DateTime.now(),
    );
  }

  // Static method to create a new preferences model with default values
  static PreferencesModel createDefault(String userId) {
    return PreferencesModel(
      id: '', // Will be generated by Supabase
      userId: userId,
      critical: {
        "location": {
          "city": "New York",
          "neighborhoods": ["Manhattan"],
          "maxDistance": 10,
        },
        "budget": {"min": 1000, "max": 2000},
        "roomType": "private",
        "genderPreference": "any_gender",
        "moveInDate": "2023-06-01",
        "leaseDuration": "long_term",
      },
      nonCritical: {
        "schedule": "flexible",
        "noiseLevel": "moderate",
        "cookingFrequency": "sometimes",
        "diet": "no_restrictions",
        "smoking": "no",
        "drinking": "occasionally",
        "pets": "comfortable_with_pets",
        "cleaningHabits": "average",
        "guestPolicy": "occasional_guests",
      },
      interests: {}, // Empty interests map
      discoverySettings: {
        "ageRange": {"min": 18, "max": 40},
        "distance": 15,
        "showMeToOthers": true,
      },
      createdAt: DateTime.now(),
      updatedAt: DateTime.now(),
    );
  }
}
